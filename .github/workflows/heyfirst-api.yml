name: "[heyfirst-api] build-push-deploy"

on:
  push:
    branches:
      - main
    paths:
      - "apps/heyfirst-api/**"
      - "tools/**"
      - ".github/workflows/**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout master
        uses: actions/checkout@main

      # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
      - name: Build container image
        run: docker build -f $GITHUB_WORKSPACE/apps/heyfirst-api/docker/Dockerfile -t heyfirst/heyfirst-api:latest -t heyfirst/heyfirst-api:$(echo $GITHUB_SHA | head -c7) .

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to DockerHub
        run: |
          docker push heyfirst/heyfirst-api:latest
          docker push heyfirst/heyfirst-api:$(echo $GITHUB_SHA | head -c7)

      # Deploy to DigitalOCcean Kubernetes.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Update deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|heyfirst/heyfirst-api:'${TAG}'|' $GITHUB_WORKSPACE/tools/kubernetes/deployment-patch-file.yml

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl patch deployment heyfirst-api-deployment --patch-file $GITHUB_WORKSPACE/tools/kubernetes/deployment-patch-file.yml

      - name: Verify deployment
        run: kubectl rollout status deployment/heyfirst-api-deployment

  build-gcr:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout master
        uses: actions/checkout@main

      # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
      - name: Build container image
        run: |
          docker build -f $GITHUB_WORKSPACE/apps/heyfirst-api/docker/Dockerfile \
          -t europe-north1-docker.pkg.dev/heyfirst-co/heyfirst-repo:latest .

      - id: "gcr-auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: europe-north1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcr-auth.outputs.access_token }}

      - name: Push image to GAR
        run: |
          docker push europe-north1-docker.pkg.dev/heyfirst-co/heyfirst-repo:latest
