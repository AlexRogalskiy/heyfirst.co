name: "[heyfirst-api] build-push-deploy"

on:
  push:
    branches:
      - main
    paths:
      - "apps/heyfirst-api/**"
      - "tools/**"
      - ".github/workflows/**"

jobs:
  build-gcr-image:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout master
        uses: actions/checkout@main

      # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
      - name: Build container image
        run: |
          docker build -f $GITHUB_WORKSPACE/apps/heyfirst-api/docker/Dockerfile \
          -t europe-north1-docker.pkg.dev/heyfirst-co/heyfirst-repo/heyfirst-api:latest .

      - id: "gcr-auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: europe-north1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcr-auth.outputs.access_token }}

      # for optimize cost, I only push the latest tag to GAR
      - name: Push image to GAR
        run: |
          docker push europe-north1-docker.pkg.dev/heyfirst-co/heyfirst-repo/heyfirst-api:latest

  run-migration:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout master
        uses: actions/checkout@main

      - id: "gcr-auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      - name: "Install Cloud SQL Proxy"
        run: |
          wget "https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64" -O cloud_sql_proxy
          chmod +x cloud_sql_proxy

      - name: Run Prisma Migration
        run: ./cloud_sql_proxy -instances=$SQL_PROXY_INSTANCE_URL & npx prisma migrate deploy --schema "$GITHUB_WORKSPACE/apps/heyfirst-api/prisma/schema.prisma"
        env:
          SQL_PROXY_INSTANCE_URL: ${{ secrets.SQL_PROXY_INSTANCE_URL }}
          DATABASE_URL: ${{ secrets.HEYFIRST_CO_POSTGRES }}

  deploy-to-cloudrun:
    runs-on: ubuntu-latest
    needs: ["build-gcr-image", "run-migration"]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout master
        uses: actions/checkout@main

      - id: "gcr-auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      - name: "Deploy to Cloud Run"
        run: gcloud run deploy heyfirst-api --image europe-north1-docker.pkg.dev/heyfirst-co/heyfirst-repo/heyfirst-api:latest
